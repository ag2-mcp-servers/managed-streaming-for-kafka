# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:12:49+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class BadRequestException(RootModel[Any]):
    root: Any


class BrokerAZDistribution(Enum):
    DEFAULT = 'DEFAULT'


class ClientBroker(Enum):
    TLS = 'TLS'
    TLS_PLAINTEXT = 'TLS_PLAINTEXT'
    PLAINTEXT = 'PLAINTEXT'


class ClusterState(Enum):
    ACTIVE = 'ACTIVE'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    FAILED = 'FAILED'
    HEALING = 'HEALING'
    MAINTENANCE = 'MAINTENANCE'
    REBOOTING_BROKER = 'REBOOTING_BROKER'
    UPDATING = 'UPDATING'


class ClusterType(Enum):
    PROVISIONED = 'PROVISIONED'
    SERVERLESS = 'SERVERLESS'


class ConfigurationState(Enum):
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    DELETE_FAILED = 'DELETE_FAILED'


class ConflictException(RootModel[Any]):
    root: Any


class DeleteClusterRequest(BaseModel):
    pass


class DeleteConfigurationRequest(BaseModel):
    pass


class DescribeClusterOperationRequest(BaseModel):
    pass


class DescribeClusterRequest(BaseModel):
    pass


class DescribeClusterV2Request(BaseModel):
    pass


class DescribeConfigurationRequest(BaseModel):
    pass


class DescribeConfigurationRevisionRequest(BaseModel):
    pass


class EnhancedMonitoring(Enum):
    DEFAULT = 'DEFAULT'
    PER_BROKER = 'PER_BROKER'
    PER_TOPIC_PER_BROKER = 'PER_TOPIC_PER_BROKER'
    PER_TOPIC_PER_PARTITION = 'PER_TOPIC_PER_PARTITION'


class ForbiddenException(RootModel[Any]):
    root: Any


class GetBootstrapBrokersRequest(BaseModel):
    pass


class GetCompatibleKafkaVersionsRequest(BaseModel):
    pass


class InternalServerErrorException(RootModel[Any]):
    root: Any


class KafkaVersionStatus(Enum):
    ACTIVE = 'ACTIVE'
    DEPRECATED = 'DEPRECATED'


class ListClusterOperationsRequest(BaseModel):
    pass


class ListClustersRequest(BaseModel):
    pass


class ListClustersV2Request(BaseModel):
    pass


class ListConfigurationRevisionsRequest(BaseModel):
    pass


class ListConfigurationsRequest(BaseModel):
    pass


class ListKafkaVersionsRequest(BaseModel):
    pass


class ListNodesRequest(BaseModel):
    pass


class ListScramSecretsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class NodeType(Enum):
    BROKER = 'BROKER'


class NotFoundException(RootModel[Any]):
    root: Any


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class StorageMode(Enum):
    LOCAL = 'LOCAL'
    TIERED = 'TIERED'


class TooManyRequestsException(RootModel[Any]):
    root: Any


class UnauthorizedException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    pass


class FieldBlob(RootModel[str]):
    root: str


class FieldBoolean(RootModel[bool]):
    root: bool


class FieldDouble(RootModel[float]):
    root: float


class FieldInteger(RootModel[int]):
    root: int


class FieldIntegerMin1Max15(RootModel[conint(ge=1, le=15)]):
    root: conint(ge=1, le=15)


class FieldIntegerMin1Max16384(RootModel[conint(ge=1, le=16384)]):
    root: conint(ge=1, le=16384)


class FieldLong(RootModel[int]):
    root: int


class FieldString(RootModel[str]):
    root: str


class FieldStringMin1Max128(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class FieldStringMin1Max64(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class FieldStringMin5Max32(RootModel[constr(min_length=5, max_length=32)]):
    root: constr(min_length=5, max_length=32)


class FieldTimestampIso8601(RootModel[datetime]):
    root: datetime


class ConfigurationInfo1(BaseModel):
    Arn: Optional[FieldString] = None
    Revision: Optional[FieldLong] = None


class V1ClustersClusterArnConfigurationPutRequest(BaseModel):
    configurationInfo: ConfigurationInfo1 = Field(
        ...,
        description='\n            <p>Specifies the configuration to use for the brokers.</p>',
    )
    currentVersion: str = Field(
        ...,
        description='\n            <p>The version of the cluster that needs to be updated.</p>',
    )


class V1ClustersClusterArnNodesCountPutRequest(BaseModel):
    currentVersion: str = Field(
        ...,
        description='\n            <p>The version of cluster to update from. A successful operation will then generate a new version.</p>',
    )
    targetNumberOfBrokerNodes: conint(ge=1, le=15) = Field(
        ...,
        description='\n            <p>The number of broker nodes that you want the cluster to have after this operation completes successfully.</p>',
    )


class V1ClustersClusterArnNodesTypePutRequest(BaseModel):
    currentVersion: str = Field(
        ...,
        description='\n            <p>The cluster version that you want to change. After this operation completes successfully, the cluster will have a new version.</p>',
    )
    targetInstanceType: str = Field(
        ...,
        description='\n            <p>The Amazon MSK broker type that you want all of the brokers in this cluster to be.</p>',
    )


class V1ClustersClusterArnRebootBrokerPutRequest(BaseModel):
    brokerIds: List[FieldString] = Field(
        ...,
        description='\n            <p>The list of broker IDs to be rebooted. The reboot-broker operation supports rebooting one broker at a time.</p>',
    )


class V1ClustersClusterArnScramSecretsPatchRequest(BaseModel):
    secretArnList: List[FieldString] = Field(
        ..., description='\n            <p>List of AWS Secrets Manager secret ARNs.</p>'
    )


class V1ClustersClusterArnScramSecretsPostRequest(BaseModel):
    secretArnList: List[FieldString] = Field(
        ..., description='\n            <p>List of AWS Secrets Manager secret ARNs.</p>'
    )


class ProvisionedThroughput(BaseModel):
    Enabled: Optional[FieldBoolean] = None
    VolumeThroughput: Optional[FieldInteger] = None


class V1ClustersClusterArnStoragePutRequest(BaseModel):
    currentVersion: str = Field(
        ...,
        description='\n            <p>The version of cluster to update from. A successful operation will then generate a new version.</p>',
    )
    provisionedThroughput: Optional[ProvisionedThroughput] = Field(
        None,
        description='\n            <p>Contains information about provisioned throughput for EBS storage volumes attached to kafka broker nodes.</p>',
    )
    storageMode: Optional[StorageMode] = Field(
        None, description='Controls storage mode for various supported storage tiers.'
    )
    volumeSizeGB: Optional[int] = Field(
        None, description='\n            <p>size of the EBS volume to update.</p>'
    )


class V1ClustersClusterArnVersionPutRequest(BaseModel):
    configurationInfo: Optional[ConfigurationInfo1] = Field(
        None,
        description='\n            <p>Specifies the configuration to use for the brokers.</p>',
    )
    currentVersion: str = Field(
        ..., description='\n            <p>Current cluster version.</p>'
    )
    targetKafkaVersion: str = Field(
        ..., description='\n            <p>Target Kafka version.</p>'
    )


class V1ConfigurationsPostRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='\n            <p>The description of the configuration.</p>'
    )
    kafkaVersions: Optional[List[FieldString]] = Field(
        None,
        description='\n            <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>',
    )
    name: str = Field(
        ..., description='\n            <p>The name of the configuration.</p>'
    )
    serverProperties: str = Field(
        ...,
        description='\n            <p>Contents of the <filename>server.properties</filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. \n               When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>server.properties</filename> can be in plaintext.</p>',
    )


class V1ConfigurationsArnPutRequest(BaseModel):
    description: Optional[str] = Field(
        None,
        description='\n            <p>The description of the configuration revision.</p>',
    )
    serverProperties: str = Field(
        ...,
        description='\n            <p>Contents of the <filename>server.properties</filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. \n               When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>server.properties</filename> can be in plaintext.</p>',
    )


class V1TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, FieldString] = Field(
        ..., description='\n            <p>The key-value pair for the resource tag.</p>'
    )


class TagKeys(RootModel[List[FieldString]]):
    root: List[FieldString]


class BrokerSoftwareInfo(BaseModel):
    ConfigurationArn: Optional[FieldString] = None
    ConfigurationRevision: Optional[FieldLong] = None
    KafkaVersion: Optional[FieldString] = None


class CloudWatchLogs(BaseModel):
    Enabled: FieldBoolean
    LogGroup: Optional[FieldString] = None


class ClusterOperationStepInfo(BaseModel):
    StepStatus: Optional[FieldString] = None


class ConfigurationInfo(BaseModel):
    Arn: FieldString
    Revision: FieldLong


class ConfigurationRevision(BaseModel):
    CreationTime: FieldTimestampIso8601
    Description: Optional[FieldString] = None
    Revision: FieldLong


class CreateClusterResponse(BaseModel):
    ClusterArn: Optional[FieldString] = None
    ClusterName: Optional[FieldString] = None
    State: Optional[ClusterState] = None


class CreateClusterV2Response(BaseModel):
    ClusterArn: Optional[FieldString] = None
    ClusterName: Optional[FieldString] = None
    ClusterType_1: Optional[ClusterType] = Field(None, alias='ClusterType')
    State: Optional[ClusterState] = None


class CreateConfigurationResponse(BaseModel):
    Arn: Optional[FieldString] = None
    CreationTime: Optional[FieldTimestampIso8601] = None
    LatestRevision: Optional[ConfigurationRevision] = None
    Name: Optional[FieldString] = None
    State: Optional[ConfigurationState] = None


class DeleteClusterResponse(BaseModel):
    ClusterArn: Optional[FieldString] = None
    State: Optional[ClusterState] = None


class DeleteConfigurationResponse(BaseModel):
    Arn: Optional[FieldString] = None
    State: Optional[ConfigurationState] = None


class DescribeConfigurationRevisionResponse(BaseModel):
    Arn: Optional[FieldString] = None
    CreationTime: Optional[FieldTimestampIso8601] = None
    Description: Optional[FieldString] = None
    Revision: Optional[FieldLong] = None
    ServerProperties: Optional[FieldBlob] = None


class EncryptionAtRest(BaseModel):
    DataVolumeKMSKeyId: FieldString


class EncryptionInTransit(BaseModel):
    ClientBroker_1: Optional[ClientBroker] = Field(None, alias='ClientBroker')
    InCluster: Optional[FieldBoolean] = None


class EncryptionInfo(BaseModel):
    EncryptionAtRest_1: Optional[EncryptionAtRest] = Field(
        None, alias='EncryptionAtRest'
    )
    EncryptionInTransit_1: Optional[EncryptionInTransit] = Field(
        None, alias='EncryptionInTransit'
    )


class ErrorInfo(BaseModel):
    ErrorCode: Optional[FieldString] = None
    ErrorString: Optional[FieldString] = None


class Firehose(BaseModel):
    DeliveryStream: Optional[FieldString] = None
    Enabled: FieldBoolean


class GetBootstrapBrokersResponse(BaseModel):
    BootstrapBrokerString: Optional[FieldString] = None
    BootstrapBrokerStringPublicSaslIam: Optional[FieldString] = None
    BootstrapBrokerStringPublicSaslScram: Optional[FieldString] = None
    BootstrapBrokerStringPublicTls: Optional[FieldString] = None
    BootstrapBrokerStringSaslIam: Optional[FieldString] = None
    BootstrapBrokerStringSaslScram: Optional[FieldString] = None
    BootstrapBrokerStringTls: Optional[FieldString] = None


class Iam(BaseModel):
    Enabled: Optional[FieldBoolean] = None


class JmxExporter(BaseModel):
    EnabledInBroker: FieldBoolean


class JmxExporterInfo(BaseModel):
    EnabledInBroker: FieldBoolean


class KafkaVersion(BaseModel):
    Status: Optional[KafkaVersionStatus] = None
    Version: Optional[FieldString] = None


class NodeExporter(BaseModel):
    EnabledInBroker: FieldBoolean


class NodeExporterInfo(BaseModel):
    EnabledInBroker: FieldBoolean


class Prometheus(BaseModel):
    JmxExporter_1: Optional[JmxExporter] = Field(None, alias='JmxExporter')
    NodeExporter_1: Optional[NodeExporter] = Field(None, alias='NodeExporter')


class PrometheusInfo(BaseModel):
    JmxExporter: Optional[JmxExporterInfo] = None
    NodeExporter: Optional[NodeExporterInfo] = None


class PublicAccess(BaseModel):
    Type: Optional[FieldString] = None


class RebootBrokerResponse(BaseModel):
    ClusterArn: Optional[FieldString] = None
    ClusterOperationArn: Optional[FieldString] = None


class S3(BaseModel):
    Bucket: Optional[FieldString] = None
    Enabled: FieldBoolean
    Prefix: Optional[FieldString] = None


class Scram(BaseModel):
    Enabled: Optional[FieldBoolean] = None


class ServerlessSasl(BaseModel):
    Iam_1: Optional[Iam] = Field(None, alias='Iam')


class StateInfo(BaseModel):
    Code: Optional[FieldString] = None
    Message: Optional[FieldString] = None


class Unauthenticated(BaseModel):
    Enabled: Optional[FieldBoolean] = None


class UnprocessedScramSecret(BaseModel):
    ErrorCode: Optional[FieldString] = None
    ErrorMessage: Optional[FieldString] = None
    SecretArn: Optional[FieldString] = None


class UpdateBrokerCountRequest(BaseModel):
    CurrentVersion: FieldString
    TargetNumberOfBrokerNodes: FieldIntegerMin1Max15


class UpdateBrokerCountResponse(BaseModel):
    ClusterArn: Optional[FieldString] = None
    ClusterOperationArn: Optional[FieldString] = None


class UpdateBrokerStorageResponse(BaseModel):
    ClusterArn: Optional[FieldString] = None
    ClusterOperationArn: Optional[FieldString] = None


class UpdateBrokerTypeRequest(BaseModel):
    CurrentVersion: FieldString
    TargetInstanceType: FieldString


class UpdateBrokerTypeResponse(BaseModel):
    ClusterArn: Optional[FieldString] = None
    ClusterOperationArn: Optional[FieldString] = None


class UpdateClusterConfigurationRequest(BaseModel):
    ConfigurationInfo_1: ConfigurationInfo = Field(..., alias='ConfigurationInfo')
    CurrentVersion: FieldString


class UpdateClusterConfigurationResponse(BaseModel):
    ClusterArn: Optional[FieldString] = None
    ClusterOperationArn: Optional[FieldString] = None


class UpdateClusterKafkaVersionRequest(BaseModel):
    ConfigurationInfo_1: Optional[ConfigurationInfo] = Field(
        None, alias='ConfigurationInfo'
    )
    CurrentVersion: FieldString
    TargetKafkaVersion: FieldString


class UpdateClusterKafkaVersionResponse(BaseModel):
    ClusterArn: Optional[FieldString] = None
    ClusterOperationArn: Optional[FieldString] = None


class UpdateConfigurationRequest(BaseModel):
    Description: Optional[FieldString] = None
    ServerProperties: FieldBlob


class UpdateConfigurationResponse(BaseModel):
    Arn: Optional[FieldString] = None
    LatestRevision: Optional[ConfigurationRevision] = None


class UpdateConnectivityResponse(BaseModel):
    ClusterArn: Optional[FieldString] = None
    ClusterOperationArn: Optional[FieldString] = None


class UpdateMonitoringResponse(BaseModel):
    ClusterArn: Optional[FieldString] = None
    ClusterOperationArn: Optional[FieldString] = None


class UpdateSecurityResponse(BaseModel):
    ClusterArn: Optional[FieldString] = None
    ClusterOperationArn: Optional[FieldString] = None


class UpdateStorageRequest(BaseModel):
    CurrentVersion: FieldString
    ProvisionedThroughput_1: Optional[ProvisionedThroughput] = Field(
        None, alias='ProvisionedThroughput'
    )
    StorageMode_1: Optional[StorageMode] = Field(None, alias='StorageMode')
    VolumeSizeGB: Optional[FieldInteger] = None


class UpdateStorageResponse(BaseModel):
    ClusterArn: Optional[FieldString] = None
    ClusterOperationArn: Optional[FieldString] = None


class FieldListOfConfigurationRevision(RootModel[List[ConfigurationRevision]]):
    root: List[ConfigurationRevision]


class FieldListOfKafkaVersion(RootModel[List[KafkaVersion]]):
    root: List[KafkaVersion]


class FieldListOfUnprocessedScramSecret(RootModel[List[UnprocessedScramSecret]]):
    root: List[UnprocessedScramSecret]


class FieldListOfString(RootModel[List[FieldString]]):
    root: List[FieldString]


class FieldMapOfString(RootModel[Optional[Dict[str, FieldString]]]):
    root: Optional[Dict[str, FieldString]] = None


class OpenMonitoring1(BaseModel):
    Prometheus: Optional[PrometheusInfo] = None


class ConnectivityInfo(BaseModel):
    PublicAccess_1: Optional[PublicAccess] = Field(None, alias='PublicAccess')


class V1ClustersClusterArnConnectivityPutRequest(BaseModel):
    connectivityInfo: ConnectivityInfo = Field(
        ...,
        description='\n            <p>Information about the broker access configuration.</p>',
    )
    currentVersion: str = Field(
        ...,
        description="\n            <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>",
    )


class BatchAssociateScramSecretRequest(BaseModel):
    SecretArnList: FieldListOfString


class BatchAssociateScramSecretResponse(BaseModel):
    ClusterArn: Optional[FieldString] = None
    UnprocessedScramSecrets: Optional[FieldListOfUnprocessedScramSecret] = None


class BatchDisassociateScramSecretRequest(BaseModel):
    SecretArnList: FieldListOfString


class BatchDisassociateScramSecretResponse(BaseModel):
    ClusterArn: Optional[FieldString] = None
    UnprocessedScramSecrets: Optional[FieldListOfUnprocessedScramSecret] = None


class BrokerEBSVolumeInfo(BaseModel):
    KafkaBrokerNodeId: FieldString
    ProvisionedThroughput_1: Optional[ProvisionedThroughput] = Field(
        None, alias='ProvisionedThroughput'
    )
    VolumeSizeGB: Optional[FieldInteger] = None


class BrokerLogs(BaseModel):
    CloudWatchLogs_1: Optional[CloudWatchLogs] = Field(None, alias='CloudWatchLogs')
    Firehose_1: Optional[Firehose] = Field(None, alias='Firehose')
    S3_1: Optional[S3] = Field(None, alias='S3')


class BrokerNodeInfo(BaseModel):
    AttachedENIId: Optional[FieldString] = None
    BrokerId: Optional[FieldDouble] = None
    ClientSubnet: Optional[FieldString] = None
    ClientVpcIpAddress: Optional[FieldString] = None
    CurrentBrokerSoftwareInfo: Optional[BrokerSoftwareInfo] = None
    Endpoints: Optional[FieldListOfString] = None


class ClusterOperationStep(BaseModel):
    StepInfo: Optional[ClusterOperationStepInfo] = None
    StepName: Optional[FieldString] = None


class CompatibleKafkaVersion(BaseModel):
    SourceVersion: Optional[FieldString] = None
    TargetVersions: Optional[FieldListOfString] = None


class Configuration(BaseModel):
    Arn: FieldString
    CreationTime: FieldTimestampIso8601
    Description: FieldString
    KafkaVersions: FieldListOfString
    LatestRevision: ConfigurationRevision
    Name: FieldString
    State: ConfigurationState


class CreateConfigurationRequest(BaseModel):
    Description: Optional[FieldString] = None
    KafkaVersions: Optional[FieldListOfString] = None
    Name: FieldString
    ServerProperties: FieldBlob


class DescribeConfigurationResponse(BaseModel):
    Arn: Optional[FieldString] = None
    CreationTime: Optional[FieldTimestampIso8601] = None
    Description: Optional[FieldString] = None
    KafkaVersions: Optional[FieldListOfString] = None
    LatestRevision: Optional[ConfigurationRevision] = None
    Name: Optional[FieldString] = None
    State: Optional[ConfigurationState] = None


class EBSStorageInfo(BaseModel):
    ProvisionedThroughput_1: Optional[ProvisionedThroughput] = Field(
        None, alias='ProvisionedThroughput'
    )
    VolumeSize: Optional[FieldIntegerMin1Max16384] = None


class ListConfigurationRevisionsResponse(BaseModel):
    NextToken: Optional[FieldString] = None
    Revisions: Optional[FieldListOfConfigurationRevision] = None


class ListKafkaVersionsResponse(BaseModel):
    KafkaVersions: Optional[FieldListOfKafkaVersion] = None
    NextToken: Optional[FieldString] = None


class ListScramSecretsResponse(BaseModel):
    NextToken: Optional[FieldString] = None
    SecretArnList: Optional[FieldListOfString] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[FieldMapOfString] = None


class LoggingInfo(BaseModel):
    BrokerLogs_1: BrokerLogs = Field(..., alias='BrokerLogs')


class OpenMonitoring(BaseModel):
    Prometheus_1: Prometheus = Field(..., alias='Prometheus')


class OpenMonitoringInfo(BaseModel):
    Prometheus: PrometheusInfo


class RebootBrokerRequest(BaseModel):
    BrokerIds: FieldListOfString


class Sasl(BaseModel):
    Iam_1: Optional[Iam] = Field(None, alias='Iam')
    Scram_1: Optional[Scram] = Field(None, alias='Scram')


class ServerlessClientAuthentication(BaseModel):
    Sasl: Optional[ServerlessSasl] = None


class StorageInfo(BaseModel):
    EbsStorageInfo: Optional[EBSStorageInfo] = None


class TagResourceRequest(BaseModel):
    Tags: FieldMapOfString


class Tls(BaseModel):
    CertificateAuthorityArnList: Optional[FieldListOfString] = None
    Enabled: Optional[FieldBoolean] = None


class UpdateConnectivityRequest(BaseModel):
    ConnectivityInfo_1: ConnectivityInfo = Field(..., alias='ConnectivityInfo')
    CurrentVersion: FieldString


class UpdateMonitoringRequest(BaseModel):
    CurrentVersion: FieldString
    EnhancedMonitoring_1: Optional[EnhancedMonitoring] = Field(
        None, alias='EnhancedMonitoring'
    )
    LoggingInfo_1: Optional[LoggingInfo] = Field(None, alias='LoggingInfo')
    OpenMonitoring: Optional[OpenMonitoringInfo] = None


class VpcConfig(BaseModel):
    SecurityGroupIds: Optional[FieldListOfString] = None
    SubnetIds: FieldListOfString


class ZookeeperNodeInfo(BaseModel):
    AttachedENIId: Optional[FieldString] = None
    ClientVpcIpAddress: Optional[FieldString] = None
    Endpoints: Optional[FieldListOfString] = None
    ZookeeperId: Optional[FieldDouble] = None
    ZookeeperVersion: Optional[FieldString] = None


class FieldListOfBrokerEBSVolumeInfo(RootModel[List[BrokerEBSVolumeInfo]]):
    root: List[BrokerEBSVolumeInfo]


class FieldListOfClusterOperationStep(RootModel[List[ClusterOperationStep]]):
    root: List[ClusterOperationStep]


class FieldListOfCompatibleKafkaVersion(RootModel[List[CompatibleKafkaVersion]]):
    root: List[CompatibleKafkaVersion]


class FieldListOfConfiguration(RootModel[List[Configuration]]):
    root: List[Configuration]


class FieldListOfVpcConfig(RootModel[List[VpcConfig]]):
    root: List[VpcConfig]


class Serverless1(BaseModel):
    ClientAuthentication: Optional[ServerlessClientAuthentication] = None
    VpcConfigs: Optional[FieldListOfVpcConfig] = None


class BrokerNodeGroupInfo1(BaseModel):
    BrokerAZDistribution_1: Optional[BrokerAZDistribution] = Field(
        None, alias='BrokerAZDistribution'
    )
    ClientSubnets: Optional[FieldListOfString] = None
    ConnectivityInfo_1: Optional[ConnectivityInfo] = Field(
        None, alias='ConnectivityInfo'
    )
    InstanceType: Optional[FieldStringMin5Max32] = None
    SecurityGroups: Optional[FieldListOfString] = None
    StorageInfo_1: Optional[StorageInfo] = Field(None, alias='StorageInfo')


class ClientAuthentication(BaseModel):
    Sasl_1: Optional[Sasl] = Field(None, alias='Sasl')
    Tls_1: Optional[Tls] = Field(None, alias='Tls')
    Unauthenticated_1: Optional[Unauthenticated] = Field(None, alias='Unauthenticated')


class LoggingInfo1(BaseModel):
    BrokerLogs_1: Optional[BrokerLogs] = Field(None, alias='BrokerLogs')


class V1ClustersPostRequest(BaseModel):
    brokerNodeGroupInfo: BrokerNodeGroupInfo1 = Field(
        ...,
        description='\n            <p>Describes the setup to be used for Apache Kafka broker nodes in the cluster.</p>',
    )
    clientAuthentication: Optional[ClientAuthentication] = Field(
        None,
        description='\n            <p>Includes all client authentication information.</p>',
    )
    clusterName: constr(min_length=1, max_length=64) = Field(
        ..., description='\n            <p>The name of the cluster.</p>'
    )
    configurationInfo: Optional[ConfigurationInfo1] = Field(
        None,
        description='\n            <p>Specifies the configuration to use for the brokers.</p>',
    )
    encryptionInfo: Optional[EncryptionInfo] = Field(
        None,
        description='\n            <p>Includes encryption-related information, such as the AWS KMS key used for encrypting data at rest and whether you want MSK to encrypt your data in transit.</p>',
    )
    enhancedMonitoring: Optional[EnhancedMonitoring] = Field(
        None,
        description='\n            <p>Specifies which metrics are gathered for the MSK cluster. This property has the following possible values: DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION. For a list of the metrics associated with each of these levels of monitoring, see <a href="https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html">Monitoring</a>.</p>',
    )
    kafkaVersion: constr(min_length=1, max_length=128) = Field(
        ..., description='\n            <p>The version of Apache Kafka.</p>'
    )
    loggingInfo: Optional[LoggingInfo1] = Field(None, description='')
    numberOfBrokerNodes: conint(ge=1, le=15) = Field(
        ...,
        description='\n            <p>The number of broker nodes in the cluster.</p>',
    )
    openMonitoring: Optional[OpenMonitoring1] = Field(
        None,
        description='\n            <p>JMX and Node monitoring for the MSK cluster.</p>',
    )
    storageMode: Optional[StorageMode] = Field(
        None, description='Controls storage mode for various supported storage tiers.'
    )
    tags: Optional[Dict[str, FieldString]] = Field(
        None, description='\n            <p>Create tags when creating the cluster.</p>'
    )


class V1ClustersClusterArnMonitoringPutRequest(BaseModel):
    currentVersion: str = Field(
        ...,
        description="\n            <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>",
    )
    enhancedMonitoring: Optional[EnhancedMonitoring] = Field(
        None,
        description='\n            <p>Specifies which metrics are gathered for the MSK cluster. This property has the following possible values: DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION. For a list of the metrics associated with each of these levels of monitoring, see <a href="https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html">Monitoring</a>.</p>',
    )
    loggingInfo: Optional[LoggingInfo1] = Field(None, description='')
    openMonitoring: Optional[OpenMonitoring1] = Field(
        None,
        description='\n            <p>JMX and Node monitoring for the MSK cluster.</p>',
    )


class V1ClustersClusterArnNodesStoragePutRequest(BaseModel):
    currentVersion: str = Field(
        ...,
        description='\n            <p>The version of cluster to update from. A successful operation will then generate a new version.</p>',
    )
    targetBrokerEBSVolumeInfo: List[BrokerEBSVolumeInfo] = Field(
        ...,
        description='\n            <p>Describes the target volume size and the ID of the broker to apply the update to.</p>',
    )


class V1ClustersClusterArnSecurityPatchRequest(BaseModel):
    clientAuthentication: Optional[ClientAuthentication] = Field(
        None,
        description='\n            <p>Includes all client authentication information.</p>',
    )
    currentVersion: str = Field(
        ...,
        description="\n            <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>",
    )
    encryptionInfo: Optional[EncryptionInfo] = Field(
        None,
        description='\n            <p>Includes encryption-related information, such as the AWS KMS key used for encrypting data at rest and whether you want MSK to encrypt your data in transit.</p>',
    )


class BrokerNodeGroupInfo(BaseModel):
    BrokerAZDistribution_1: Optional[BrokerAZDistribution] = Field(
        None, alias='BrokerAZDistribution'
    )
    ClientSubnets: FieldListOfString
    ConnectivityInfo_1: Optional[ConnectivityInfo] = Field(
        None, alias='ConnectivityInfo'
    )
    InstanceType: FieldStringMin5Max32
    SecurityGroups: Optional[FieldListOfString] = None
    StorageInfo_1: Optional[StorageInfo] = Field(None, alias='StorageInfo')


class ClusterInfo(BaseModel):
    ActiveOperationArn: Optional[FieldString] = None
    BrokerNodeGroupInfo_1: Optional[BrokerNodeGroupInfo] = Field(
        None, alias='BrokerNodeGroupInfo'
    )
    ClientAuthentication_1: Optional[ClientAuthentication] = Field(
        None, alias='ClientAuthentication'
    )
    ClusterArn: Optional[FieldString] = None
    ClusterName: Optional[FieldString] = None
    CreationTime: Optional[FieldTimestampIso8601] = None
    CurrentBrokerSoftwareInfo: Optional[BrokerSoftwareInfo] = None
    CurrentVersion: Optional[FieldString] = None
    EncryptionInfo_1: Optional[EncryptionInfo] = Field(None, alias='EncryptionInfo')
    EnhancedMonitoring_1: Optional[EnhancedMonitoring] = Field(
        None, alias='EnhancedMonitoring'
    )
    LoggingInfo_1: Optional[LoggingInfo] = Field(None, alias='LoggingInfo')
    NumberOfBrokerNodes: Optional[FieldInteger] = None
    OpenMonitoring_1: Optional[OpenMonitoring] = Field(None, alias='OpenMonitoring')
    State: Optional[ClusterState] = None
    StateInfo_1: Optional[StateInfo] = Field(None, alias='StateInfo')
    StorageMode_1: Optional[StorageMode] = Field(None, alias='StorageMode')
    Tags: Optional[FieldMapOfString] = None
    ZookeeperConnectString: Optional[FieldString] = None
    ZookeeperConnectStringTls: Optional[FieldString] = None


class CreateClusterRequest(BaseModel):
    BrokerNodeGroupInfo_1: BrokerNodeGroupInfo = Field(..., alias='BrokerNodeGroupInfo')
    ClientAuthentication_1: Optional[ClientAuthentication] = Field(
        None, alias='ClientAuthentication'
    )
    ClusterName: FieldStringMin1Max64
    ConfigurationInfo_1: Optional[ConfigurationInfo] = Field(
        None, alias='ConfigurationInfo'
    )
    EncryptionInfo_1: Optional[EncryptionInfo] = Field(None, alias='EncryptionInfo')
    EnhancedMonitoring_1: Optional[EnhancedMonitoring] = Field(
        None, alias='EnhancedMonitoring'
    )
    KafkaVersion: FieldStringMin1Max128
    LoggingInfo_1: Optional[LoggingInfo] = Field(None, alias='LoggingInfo')
    NumberOfBrokerNodes: FieldIntegerMin1Max15
    OpenMonitoring: Optional[OpenMonitoringInfo] = None
    StorageMode_1: Optional[StorageMode] = Field(None, alias='StorageMode')
    Tags: Optional[FieldMapOfString] = None


class DescribeClusterResponse(BaseModel):
    ClusterInfo_1: Optional[ClusterInfo] = Field(None, alias='ClusterInfo')


class GetCompatibleKafkaVersionsResponse(BaseModel):
    CompatibleKafkaVersions: Optional[FieldListOfCompatibleKafkaVersion] = None


class ListConfigurationsResponse(BaseModel):
    Configurations: Optional[FieldListOfConfiguration] = None
    NextToken: Optional[FieldString] = None


class MutableClusterInfo(BaseModel):
    BrokerEBSVolumeInfo: Optional[FieldListOfBrokerEBSVolumeInfo] = None
    ClientAuthentication_1: Optional[ClientAuthentication] = Field(
        None, alias='ClientAuthentication'
    )
    ConfigurationInfo_1: Optional[ConfigurationInfo] = Field(
        None, alias='ConfigurationInfo'
    )
    ConnectivityInfo_1: Optional[ConnectivityInfo] = Field(
        None, alias='ConnectivityInfo'
    )
    EncryptionInfo_1: Optional[EncryptionInfo] = Field(None, alias='EncryptionInfo')
    EnhancedMonitoring_1: Optional[EnhancedMonitoring] = Field(
        None, alias='EnhancedMonitoring'
    )
    InstanceType: Optional[FieldStringMin5Max32] = None
    KafkaVersion: Optional[FieldString] = None
    LoggingInfo_1: Optional[LoggingInfo] = Field(None, alias='LoggingInfo')
    NumberOfBrokerNodes: Optional[FieldInteger] = None
    OpenMonitoring_1: Optional[OpenMonitoring] = Field(None, alias='OpenMonitoring')
    StorageMode_1: Optional[StorageMode] = Field(None, alias='StorageMode')


class NodeInfo(BaseModel):
    AddedToClusterTime: Optional[FieldString] = None
    BrokerNodeInfo_1: Optional[BrokerNodeInfo] = Field(None, alias='BrokerNodeInfo')
    InstanceType: Optional[FieldString] = None
    NodeARN: Optional[FieldString] = None
    NodeType_1: Optional[NodeType] = Field(None, alias='NodeType')
    ZookeeperNodeInfo_1: Optional[ZookeeperNodeInfo] = Field(
        None, alias='ZookeeperNodeInfo'
    )


class Provisioned(BaseModel):
    BrokerNodeGroupInfo_1: BrokerNodeGroupInfo = Field(..., alias='BrokerNodeGroupInfo')
    ClientAuthentication_1: Optional[ClientAuthentication] = Field(
        None, alias='ClientAuthentication'
    )
    CurrentBrokerSoftwareInfo: Optional[BrokerSoftwareInfo] = None
    EncryptionInfo_1: Optional[EncryptionInfo] = Field(None, alias='EncryptionInfo')
    EnhancedMonitoring_1: Optional[EnhancedMonitoring] = Field(
        None, alias='EnhancedMonitoring'
    )
    LoggingInfo_1: Optional[LoggingInfo] = Field(None, alias='LoggingInfo')
    NumberOfBrokerNodes: FieldIntegerMin1Max15
    OpenMonitoring: Optional[OpenMonitoringInfo] = None
    StorageMode_1: Optional[StorageMode] = Field(None, alias='StorageMode')
    ZookeeperConnectString: Optional[FieldString] = None
    ZookeeperConnectStringTls: Optional[FieldString] = None


class ProvisionedRequest(BaseModel):
    BrokerNodeGroupInfo_1: BrokerNodeGroupInfo = Field(..., alias='BrokerNodeGroupInfo')
    ClientAuthentication_1: Optional[ClientAuthentication] = Field(
        None, alias='ClientAuthentication'
    )
    ConfigurationInfo_1: Optional[ConfigurationInfo] = Field(
        None, alias='ConfigurationInfo'
    )
    EncryptionInfo_1: Optional[EncryptionInfo] = Field(None, alias='EncryptionInfo')
    EnhancedMonitoring_1: Optional[EnhancedMonitoring] = Field(
        None, alias='EnhancedMonitoring'
    )
    KafkaVersion: FieldStringMin1Max128
    LoggingInfo_1: Optional[LoggingInfo] = Field(None, alias='LoggingInfo')
    NumberOfBrokerNodes: FieldIntegerMin1Max15
    OpenMonitoring: Optional[OpenMonitoringInfo] = None
    StorageMode_1: Optional[StorageMode] = Field(None, alias='StorageMode')


class Serverless(BaseModel):
    ClientAuthentication: Optional[ServerlessClientAuthentication] = None
    VpcConfigs: FieldListOfVpcConfig


class ServerlessRequest(BaseModel):
    ClientAuthentication: Optional[ServerlessClientAuthentication] = None
    VpcConfigs: FieldListOfVpcConfig


class UpdateBrokerStorageRequest(BaseModel):
    CurrentVersion: FieldString
    TargetBrokerEBSVolumeInfo: FieldListOfBrokerEBSVolumeInfo


class UpdateSecurityRequest(BaseModel):
    ClientAuthentication_1: Optional[ClientAuthentication] = Field(
        None, alias='ClientAuthentication'
    )
    CurrentVersion: FieldString
    EncryptionInfo_1: Optional[EncryptionInfo] = Field(None, alias='EncryptionInfo')


class FieldListOfClusterInfo(RootModel[List[ClusterInfo]]):
    root: List[ClusterInfo]


class FieldListOfNodeInfo(RootModel[List[NodeInfo]]):
    root: List[NodeInfo]


class Provisioned1(BaseModel):
    BrokerNodeGroupInfo_1: Optional[BrokerNodeGroupInfo] = Field(
        None, alias='BrokerNodeGroupInfo'
    )
    ClientAuthentication_1: Optional[ClientAuthentication] = Field(
        None, alias='ClientAuthentication'
    )
    ConfigurationInfo_1: Optional[ConfigurationInfo] = Field(
        None, alias='ConfigurationInfo'
    )
    EncryptionInfo_1: Optional[EncryptionInfo] = Field(None, alias='EncryptionInfo')
    EnhancedMonitoring_1: Optional[EnhancedMonitoring] = Field(
        None, alias='EnhancedMonitoring'
    )
    KafkaVersion: Optional[FieldStringMin1Max128] = None
    LoggingInfo_1: Optional[LoggingInfo] = Field(None, alias='LoggingInfo')
    NumberOfBrokerNodes: Optional[FieldIntegerMin1Max15] = None
    OpenMonitoring: Optional[OpenMonitoringInfo] = None
    StorageMode_1: Optional[StorageMode] = Field(None, alias='StorageMode')


class ApiV2ClustersPostRequest(BaseModel):
    clusterName: constr(min_length=1, max_length=64) = Field(
        ..., description='\n            <p>The name of the cluster.</p>'
    )
    provisioned: Optional[Provisioned1] = Field(
        None, description='\n            <p>Provisioned cluster request.</p>'
    )
    serverless: Optional[Serverless1] = Field(
        None, description='\n            <p>Serverless cluster request.</p>'
    )
    tags: Optional[Dict[str, FieldString]] = Field(
        None,
        description='\n            <p>A map of tags that you want the cluster to have.</p>',
    )


class Cluster(BaseModel):
    ActiveOperationArn: Optional[FieldString] = None
    ClusterArn: Optional[FieldString] = None
    ClusterName: Optional[FieldString] = None
    ClusterType_1: Optional[ClusterType] = Field(None, alias='ClusterType')
    CreationTime: Optional[FieldTimestampIso8601] = None
    CurrentVersion: Optional[FieldString] = None
    Provisioned_1: Optional[Provisioned] = Field(None, alias='Provisioned')
    Serverless_1: Optional[Serverless] = Field(None, alias='Serverless')
    State: Optional[ClusterState] = None
    StateInfo_1: Optional[StateInfo] = Field(None, alias='StateInfo')
    Tags: Optional[FieldMapOfString] = None


class ClusterOperationInfo(BaseModel):
    ClientRequestId: Optional[FieldString] = None
    ClusterArn: Optional[FieldString] = None
    CreationTime: Optional[FieldTimestampIso8601] = None
    EndTime: Optional[FieldTimestampIso8601] = None
    ErrorInfo_1: Optional[ErrorInfo] = Field(None, alias='ErrorInfo')
    OperationArn: Optional[FieldString] = None
    OperationState: Optional[FieldString] = None
    OperationSteps: Optional[FieldListOfClusterOperationStep] = None
    OperationType: Optional[FieldString] = None
    SourceClusterInfo: Optional[MutableClusterInfo] = None
    TargetClusterInfo: Optional[MutableClusterInfo] = None


class CreateClusterV2Request(BaseModel):
    ClusterName: FieldStringMin1Max64
    Provisioned: Optional[ProvisionedRequest] = None
    Serverless: Optional[ServerlessRequest] = None
    Tags: Optional[FieldMapOfString] = None


class DescribeClusterOperationResponse(BaseModel):
    ClusterOperationInfo_1: Optional[ClusterOperationInfo] = Field(
        None, alias='ClusterOperationInfo'
    )


class DescribeClusterV2Response(BaseModel):
    ClusterInfo: Optional[Cluster] = None


class ListClustersResponse(BaseModel):
    ClusterInfoList: Optional[FieldListOfClusterInfo] = None
    NextToken: Optional[FieldString] = None


class ListNodesResponse(BaseModel):
    NextToken: Optional[FieldString] = None
    NodeInfoList: Optional[FieldListOfNodeInfo] = None


class FieldListOfCluster(RootModel[List[Cluster]]):
    root: List[Cluster]


class FieldListOfClusterOperationInfo(RootModel[List[ClusterOperationInfo]]):
    root: List[ClusterOperationInfo]


class ListClusterOperationsResponse(BaseModel):
    ClusterOperationInfoList: Optional[FieldListOfClusterOperationInfo] = None
    NextToken: Optional[FieldString] = None


class ListClustersV2Response(BaseModel):
    ClusterInfoList: Optional[FieldListOfCluster] = None
    NextToken: Optional[FieldString] = None
